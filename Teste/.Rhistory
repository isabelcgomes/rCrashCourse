setwd("C:/Users/Isabel Giannecchini/Desktop/SSD/rCrashCourse")
dados <- read.csv("Banco de Dados 11.csv")
# Isabel Caroline Gomes Giannecchini
# 200058321
#Uso de bibliotecas(todas elas já estavam instaladas)
library(car)
library(dplyr)
library(pacman)
pacman :: p_load(dplyr, ggplot2, car, rstatix, lmtest, ggpubr, ggmisc, psych)
library(readxl)
dados <- read.csv("Banco de Dados 11.csv")
# Regressão simples
dados <- read.csv("Banco de Dados 11.csv")
# Regressão simples
dados <- read_csv("Banco de Dados 11.csv")
dados <- read.csv("Banco de Dados 11.csv")
setwd("C:/Users/Isabel Giannecchini/Desktop/SSD/rCrashCourse/Teste")
# Regressão simples
dados <- read.csv("Banco de Dados 11.csv")
dados <- read.csv("Banco de Dados 11.csv", sep=';', dec=',')
View(dados)
mod <- lm(Vendas ~ Publicidade, dados )
par(mfrow = c(2,2))
plot(mod)
shapiro.test(mod$residuals)#teste de normalidade
summary(rstandard(mod)) #isso me mostra que o ponto de máximo e de mínimo não ultrapassam -3 e +3
bptest(mod)#breusch-pagan - verifica a homocedasticidade do modelo
#regressão => breusch-pagan
#dados separados => levene (homogeneidade)
durbinWatsonTest(mod) #verifica se os resíduos são ou não independentes
#se os resíduos são independentes entre si, pvalor > NS, autocorrelação = 0
#se resíduos dependentes entre si, pvalor < NS, autocorrelação != 0
summary(mod)
#hipótese nula: b1=b2=b3=...=bx=0 -> modelo não é significativa
#hipótese alternativa: b1!=b2!=b3!=...!=bx!=0 -> modelo é significativo
#se pvalor < NS -> a minha hipótese alternativa indica que uma determinada variável pode influenciar a outra variável
#meu r² indica o quanto minha variável independente explica minha variável dependente em níveis percentuais
#r² ajustado é o ajuste do meu r² para corrigir algumas questões do modelo
#meu r² maior só é melhor se eu estou avaliando a população inteira
ggplot(data = dados, mapping = aes(x = Publicidade, y = Vendas))+
geom_point()+theme_classic()+
geom_smooth(method = 'lm', col = "red")
plot(mod)
ggplot(data = dados, mapping = aes(x = Publicidade, y = Vendas))+
geom_point()+theme_classic()+
geom_smooth(method = 'lm', col = "red")
summary(rstandard(mod))
durbinWatsonTest(mod)
summary(mod)
# Regressão múltipla
dados2 <- read.csv("Banco de Dados 12.csv", sep=';', dec=',')
View(dados2)
mod2 <- lm(Vendas ~ Publicidade, dados )
par(mfrow = c(2,2))
plot(mod2)
shapiro.test(mod$residuals)
#Teste Shapiro, é um teste de normalidade, ele avalia se a distribuição de um
#conjunto de dados se aproxima de uma distribuição normal.
summary(rstandard(mod2))
#Teste para obtenção dos resíduos padronizados
#Se meus valores máximo e mínimo estão entre -3 e 3, isso significa que
#os meus dados estão dentro de 6sigma (6 desvios padrão) de "distância" da minha
#linha de tendência central, indicando que não há outliers no meu modelo
bptest(mod2)
#breusch-pagan - verifica a homocedasticidade do modelo
#um modelo homocedástico indica uma variância constante nos erros.
#para que um teste de ANOVA, por exemplo, tenha validade, é necessário que
#as variâncias sejam comuns, ou seja, o modelo tem que ser homocedástico, por
#isso, verifica-se a homocedasticidade do modelo por meio de Breusch-Pagan
#outro ponto importante é que esse teste não funciona para dados em
#distribuições não normais, por isso o teste shapiro é realizado antes
#regressão => breusch-pagan
#dados separados => levene (homogeneidade)
durbinWatsonTest(mod2)
#Verifica a relação entre duas variáveis, isto é se são ou não independentes
#Se o valor D-WStatistic está mais próximo de 2, os resíduos são independentes
#Outra forma de analisar é pelo p-valor,
#se os resíduos são independentes entre si, pvalor > NS, autocorrelação = 0
#se resíduos dependentes entre si, pvalor < NS, autocorrelação != 0
summary(mod2)
#Resumo do modelo
#hipótese nula: b1=b2=b3=...=bx=0 -> modelo não é significativa
#(uma variável não influencia na outra)
#hipótese alternativa: b1!=b2!=b3!=...!=bx!=0 -> modelo é significativo
#(uma variável influencia na outra)
#se pvalor < NS -> a minha hipótese alternativa indica que uma determinada
#variável pode influenciar a outra variável
#meu r² indica o quanto minha variável independente explica minha variável
#dependente em níveis percentuais
#r² ajustado é o ajuste do meu r² para corrigir algumas questões do modelo
#meu r² maior só é melhor se eu estou avaliando a população inteira
ggplot(data = dados2, mapping = aes(x = Publicidade, y = Vendas))+
geom_point()+theme_classic()+
geom_smooth(method = 'lm', col = "red")
# Regressão múltipla
dados2 <- read.csv("Banco de Dados 12.csv", sep=';', dec=',')
View(dados2)
mod2 <- lm(Notas ~ Tempo_Rev+Tempo_Sono, dados )
# Regressão múltipla
dados2 <- read.csv("Banco de Dados 12.csv", sep=';', dec=',')
View(dados2)
mod2 <- lm(Notas ~ Tempo_Rev+Tempo_Sono, dados2 )
par(mfrow = c(2,2))
plot(mod2)
shapiro.test(mod$residuals)
#Teste Shapiro, é um teste de normalidade, ele avalia se a distribuição de um
#conjunto de dados se aproxima de uma distribuição normal.
summary(rstandard(mod2))
#Teste para obtenção dos resíduos padronizados
#Se meus valores máximo e mínimo estão entre -3 e 3, isso significa que
#os meus dados estão dentro de 6sigma (6 desvios padrão) de "distância" da minha
#linha de tendência central, indicando que não há outliers no meu modelo
bptest(mod2)
#breusch-pagan - verifica a homocedasticidade do modelo
#um modelo homocedástico indica uma variância constante nos erros.
#para que um teste de ANOVA, por exemplo, tenha validade, é necessário que
#as variâncias sejam comuns, ou seja, o modelo tem que ser homocedástico, por
#isso, verifica-se a homocedasticidade do modelo por meio de Breusch-Pagan
#outro ponto importante é que esse teste não funciona para dados em
#distribuições não normais, por isso o teste shapiro é realizado antes
#regressão => breusch-pagan
#dados separados => levene (homogeneidade)
durbinWatsonTest(mod2)
#Verifica a relação entre duas variáveis, isto é se são ou não independentes
#Se o valor D-WStatistic está mais próximo de 2, os resíduos são independentes
#Outra forma de analisar é pelo p-valor,
#se os resíduos são independentes entre si, pvalor > NS, autocorrelação = 0
#se resíduos dependentes entre si, pvalor < NS, autocorrelação != 0
summary(mod2)
#Resumo do modelo
#hipótese nula: b1=b2=b3=...=bx=0 -> modelo não é significativa
#(uma variável não influencia na outra)
#hipótese alternativa: b1!=b2!=b3!=...!=bx!=0 -> modelo é significativo
#(uma variável influencia na outra)
#se pvalor < NS -> a minha hipótese alternativa indica que uma determinada
#variável pode influenciar a outra variável
#meu r² indica o quanto minha variável independente explica minha variável
#dependente em níveis percentuais
#r² ajustado é o ajuste do meu r² para corrigir algumas questões do modelo
#meu r² maior só é melhor se eu estou avaliando a população inteira
ggplot(data = dados2, mapping = aes(x = Publicidade, y = Vendas))+
geom_point()+theme_classic()+
geom_smooth(method = 'lm', col = "red")
# Regressão múltipla
dados2 <- read.csv("Banco de Dados 12.csv", sep=';', dec=',')
View(dados2)
mod2 <- lm(Notas ~ Tempo_Rev+Tempo_Sono, dados2 )
par(mfrow = c(2,2))
plot(mod2)
shapiro.test(mod$residuals)
#Teste Shapiro, é um teste de normalidade, ele avalia se a distribuição de um
#conjunto de dados se aproxima de uma distribuição normal.
summary(rstandard(mod2))
#Teste para obtenção dos resíduos padronizados
#Se meus valores máximo e mínimo estão entre -3 e 3, isso significa que
#os meus dados estão dentro de 6sigma (6 desvios padrão) de "distância" da minha
#linha de tendência central, indicando que não há outliers no meu modelo
bptest(mod2)
#breusch-pagan - verifica a homocedasticidade do modelo
#um modelo homocedástico indica uma variância constante nos erros.
#para que um teste de ANOVA, por exemplo, tenha validade, é necessário que
#as variâncias sejam comuns, ou seja, o modelo tem que ser homocedástico, por
#isso, verifica-se a homocedasticidade do modelo por meio de Breusch-Pagan
#outro ponto importante é que esse teste não funciona para dados em
#distribuições não normais, por isso o teste shapiro é realizado antes
#regressão => breusch-pagan
#dados separados => levene (homogeneidade)
durbinWatsonTest(mod2)
#Verifica a relação entre duas variáveis, isto é se são ou não independentes
#Se o valor D-WStatistic está mais próximo de 2, os resíduos são independentes
#Outra forma de analisar é pelo p-valor,
#se os resíduos são independentes entre si, pvalor > NS, autocorrelação = 0
#se resíduos dependentes entre si, pvalor < NS, autocorrelação != 0
summary(mod2)
#Resumo do modelo
#hipótese nula: b1=b2=b3=...=bx=0 -> modelo não é significativa
#(uma variável não influencia na outra)
#hipótese alternativa: b1!=b2!=b3!=...!=bx!=0 -> modelo é significativo
#(uma variável influencia na outra)
#se pvalor < NS -> a minha hipótese alternativa indica que uma determinada
#variável pode influenciar a outra variável
#meu r² indica o quanto minha variável independente explica minha variável
#dependente em níveis percentuais
#r² ajustado é o ajuste do meu r² para corrigir algumas questões do modelo
#meu r² maior só é melhor se eu estou avaliando a população inteira
ggplot(data = dados2, mapping = aes(x = Tempo_Sono, y = Notas))+
geom_point()+theme_classic()+
geom_smooth(method = 'lm', col = "red")
#Esse gráfico me mostra qual a distribuição dos dados e qual a linha
#de tendência
# Onde:
# - Dados: é o nome do meu conjunto de dados
# - Aes: define o rótulo dos meus eixos
# - Geom_point: define o meu conjunto de pontos
# - Geom_smooth: define qual será o método da minha curva de regressão
#   (nesse caso: lm (linear) e eu pintei da cor vermelha)
plot3D(Resultado,
modelo=mod2,
xlab=Notas,
ylab=Tempo_Sono,
zlab=Tempo_Rev,
main="Relação entre duas variáveis")
import.packages('ExpAnalysis3d')
install.packages('ExpAnalysis3d')
library(ExpAnalysis3d)
plot3D(Resultado,
modelo=mod2,
xlab=Notas,
ylab=Tempo_Sono,
zlab=Tempo_Rev,
main="Relação entre duas variáveis")
ggplot(data = dados2, mapping = aes(x = Tempo_Rev, y = Notas))+
geom_point()+theme_classic()+
geom_smooth(method = 'lm', col = "red")
shapiro.test(mod$residuals)
graph <- scatterplot3d(dadossNotas
dados2$Tempo_Rev + dados2$Tempo_Sono
graph <- scatterplot3d(dadossNotas
dados2$Tempo_Rev + dados2$Tempo_Sono
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono
pch = 16, angle = 30, color = "steelblue", box = FALSE,
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
install.packages("scatterplot3d")
library(scatterplot3d)
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
graph$plane3d(mod2, col= "black". draw_polygon = TRUE)
install.packages("scatterplot3d")
library(scatterplot3d)
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
install.packages("scatterplot3d")
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
par(mfrow = c(1,1))
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 60, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "steelblue", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "black", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
par(mfrow = c(1,1))
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "black", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")+geom_smooth(method = 'lm', col = "red")
summary(rstandard(mod))
bptest(mod)
durbinWatsonTest(mod)
install.packages("scatterplot3d")
library(scatterplot3d)
par(mfrow = c(1,1))
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "black", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")+
geom_smooth(method = 'lm', col = "red")
shapiro.test(mod$residuals)
summary(rstandard(mod2))
bptest(mod2)
durbinWatsonTest(mod2)
summary(mod2)
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "black", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")+
geom_smooth(method = 'lm', col = "red")
graph <- scatterplot3d(dados2$Notas ~
dados2$Tempo_Rev + dados2$Tempo_Sono,
pch = 16, angle = 30, color = "black", box = FALSE,
xlab="Tempo de revisão", ylab="Tempo de sono", zlab="Notas")
summary(mod2)
summary(mod)
